public virtual class TM000_TriggerHandler {
	// static map of handlername, times run() was invoked
	private static Map<String, LoopCount> loopCountMap;
	private static Set<String> bypassedHandlers;

	public static Boolean ByPassAllTriggers = false;


	// the current context of the trigger, overridable in tests
	@TestVisible
	protected TriggerContext context;

	// the current context of the trigger, overridable in tests
	@TestVisible
	private Boolean isTriggerExecuting;

	// static initialization
	static {
		loopCountMap = new Map<String, LoopCount>();
		bypassedHandlers = new Set<String>();
	}

	// constructor
	public TM000_TriggerHandler() {
		this.setTriggerContext();
	}

	/***************************************
	 * public instance methods
	 ***************************************/

	// main method that will be called during execution
	public virtual void run() {
		if (!validateRun()) {
			return;
		}
		addToLoopCount();

		switch on this.context {
		when BEFORE_INSERT {
			this.beforeInsert();
		}
		when BEFORE_UPDATE {
			this.beforeUpdate();
		}
		when BEFORE_DELETE {
			this.beforeDelete();
		}
		when AFTER_INSERT {
			this.afterInsert();
		}
		when AFTER_UPDATE {
			this.afterUpdate();
		}
		when AFTER_DELETE {
			this.afterDelete();
		}
		when AFTER_UNDELETE {
			this.afterUndelete();
		}
		}
	}

	public void setMaxLoopCount(Integer max) {
		String handlerName = getHandlerName();
		if (!TM000_TriggerHandler.loopCountMap.containsKey(handlerName)) {
			TM000_TriggerHandler.loopCountMap.put(handlerName, new LoopCount(max));
		} else {
			TM000_TriggerHandler.loopCountMap.get(handlerName).setMax(max);
		}
	}

	public void clearMaxLoopCount() {
		this.setMaxLoopCount(-1);
	}

	/***************************************
	 * public static methods
	 ***************************************/

	public static void bypass(String handlerName) {
		TM000_TriggerHandler.bypassedHandlers.add(handlerName);
	}

	public static void clearBypass(String handlerName) {
		TM000_TriggerHandler.bypassedHandlers.remove(handlerName);
	}

	public static Boolean isBypassed(String handlerName) {
		return TM000_TriggerHandler.bypassedHandlers.contains(handlerName);
	}

	public static void clearAllBypasses() {
		TM000_TriggerHandler.bypassedHandlers.clear();
	}

	/***************************************
	 * private instancemethods
	 ***************************************/

	@TestVisible
	private void setTriggerContext() {
		this.setTriggerContext(null, false);
	}

	@TestVisible
	private void setTriggerContext(String ctx, Boolean testMode) {
		system.debug('#### IsExecuting: ' + Trigger.isExecuting + ' ' + testMode);
		if (!Trigger.isExecuting && !testMode) {
			this.isTriggerExecuting = false;
			system.debug('############ returning');
			return;
		} else {
			this.isTriggerExecuting = true;
		}

		if (ctx != null) {
			switch on ctx {
			when 'before insert' {
				this.context = TriggerContext.BEFORE_INSERT;
			}
			when 'before update' {
				this.context = TriggerContext.BEFORE_UPDATE;
			}
			when 'before delete' {
				this.context = TriggerContext.BEFORE_DELETE;
			}
			when 'after insert' {
				this.context = TriggerContext.AFTER_INSERT;
			}
			when 'after update' {
				this.context = TriggerContext.AFTER_UPDATE;
			}
			when 'after delete' {
				this.context = TriggerContext.AFTER_DELETE;
			}
			when 'after undelete' {
				this.context = TriggerContext.AFTER_UNDELETE;
			}
			}
		} else {
			switch on Trigger.operationType {
			when BEFORE_INSERT {
				this.context = TriggerContext.BEFORE_INSERT;
			}
			when BEFORE_UPDATE {
				this.context = TriggerContext.BEFORE_UPDATE;
			}
			when BEFORE_DELETE {
				this.context = TriggerContext.BEFORE_DELETE;
			}
			when AFTER_INSERT {
				this.context = TriggerContext.AFTER_INSERT;
			}
			when AFTER_UPDATE {
				this.context = TriggerContext.AFTER_UPDATE;
			}
			when AFTER_DELETE {
				this.context = TriggerContext.AFTER_DELETE;
			}
			when AFTER_UNDELETE {
				this.context = TriggerContext.AFTER_UNDELETE;
			}
			}
		}
	}

	// increment the loop count
	@TestVisible
	private void addToLoopCount() {
		String handlerName = getHandlerName();
		if (TM000_TriggerHandler.loopCountMap.containsKey(handlerName)) {
			Boolean exceeded = TM000_TriggerHandler.loopCountMap.get(handlerName)
					.increment();
			if (exceeded) {
				Integer max = TM000_TriggerHandler.loopCountMap.get(handlerName).max;
				throw new TriggerHandlerException(
						'Maximum loop count of ' +
						String.valueOf(max) +
						' reached in ' +
						handlerName
						);
			}
		}
	}
	
	// make sure this trigger should continue to run
	@TestVisible
	public Boolean validateRun() {
		if (!this.isTriggerExecuting || this.context == null) {
			throw new TriggerHandlerException('Trigger handler called outside of Trigger execution');
		}

		ExecutionSettings__c executionSetting = ExecutionSettings__c.getInstance();
		Boolean userByPassTriggers = executionSetting.ByPassAllTriggers__c;

		if(userByPassTriggers == true || TM000_TriggerHandler.ByPassAllTriggers == true || TM000_TriggerHandler.bypassedHandlers.contains(getHandlerName())) {
			return false;
		}
		return true;
	}

	@TestVisible
	private String getHandlerName() {
		return String.valueOf(this).substring(0, String.valueOf(this).indexOf(':'));
	}

	/***************************************
	 * context methods
	 ***************************************/

	// context-specific methods for override
	@TestVisible
	protected virtual void beforeInsert() {
	}
	@TestVisible
	protected virtual void beforeUpdate() {
	}
	@TestVisible
	protected virtual void beforeDelete() {
	}
	@TestVisible
	protected virtual void afterInsert() {
	}
	@TestVisible
	protected virtual void afterUpdate() {
	}
	@TestVisible
	protected virtual void afterDelete() {
	}
	@TestVisible
	protected virtual void afterUndelete() {
	}

	/***************************************
	 * inner classes
	 ***************************************/

	// inner class for managing the loop count per handler
	@TestVisible
	private class LoopCount {
		private Integer max;
		private Integer count;

		public LoopCount() {
			this.max = 5;
			this.count = 0;
		}

		public LoopCount(Integer max) {
			this.max = max;
			this.count = 0;
		}

		public Boolean increment() {
			this.count++;
			return this.exceeded();
		}

		public Boolean exceeded() {
			if (this.max < 0) {
				return false;
			}
			if (this.count > this.max) {
				return true;
			}
			return false;
		}

		public Integer getMax() {
			return this.max;
		}

		public Integer getCount() {
			return this.count;
		}

		public void setMax(Integer max) {
			this.max = max;
		}
	}

	// possible trigger contexts
	// prettier-ignore
	@TestVisible public enum TriggerContext {
		BEFORE_INSERT,
		BEFORE_UPDATE,
		BEFORE_DELETE,
		AFTER_INSERT,
		AFTER_UPDATE,
		AFTER_DELETE,
		AFTER_UNDELETE
	}
	// exception class
	public class TriggerHandlerException extends Exception {
	}
}